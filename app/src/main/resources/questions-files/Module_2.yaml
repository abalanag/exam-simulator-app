questions:
- description: "What does the 'Join point' represent in Aspect-Oriented Programming (AOP)?"
  answers:
    - option: "The execution of a method."
      correct: true
    - option: "The creation of a bean."
      correct: false
    - option: "A specific pointcut within an application."
      correct: false
    - option: "The return type of a method."
      correct: false

- description: "Which statement correctly defines a 'Pointcut' in Spring AOP?"
  answers:
    - option: "A set of join points where an advice will be executed."
      correct: true
    - option: "The return type of an advised method."
      correct: false
    - option: "A Java annotation used to define a transaction."
      correct: false
    - option: "The arguments of a method within a join point."
      correct: false

- description: "What is the purpose of 'Advice' in Aspect-Oriented Programming?"
  answers:
    - option: "The code that is executed within an aspect, such as before, after, or around a join point."
      correct: true
    - option: "A condition that specifies where an aspect is applied."
      correct: false
    - option: "A specific exception handling mechanism."
      correct: false
    - option: "A dependency injection technique."
      correct: false

- description: "What is an 'Aspect' in Spring AOP?"
  answers:
    - option: "A class that brings together pointcuts and advice."
      correct: true
    - option: "A method that is executed before a join point."
      correct: false
    - option: "An annotation that specifies transaction management."
      correct: false
    - option: "The interface that must be implemented by all advice classes."
      correct: false

- description: "How does 'Around advice' differ from other types of advice in Spring AOP?"
  answers:
    - option: "It allows the code to be executed both before and after the join point."
      correct: true
    - option: "It can only be executed before the join point."
      correct: false
    - option: "It is used exclusively for exception handling."
      correct: false
    - option: "It executes only after a method returns a value."
      correct: false

- description: "What does 'Point cut expression' determine in Spring AOP?"
  answers:
    - option: "Criteria under which advice is executed."
      correct: true
    - option: "The return type of the advice."
      correct: false
    - option: "The specific beans to be created by Spring container."
      correct: false
    - option: "The database transaction management strategy."
      correct: false

- description: "Is it true that an 'Aspect' in Spring AOP can contain multiple advices?"
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Can 'Pointcuts' be reused across different 'Aspects' in Spring AOP?"
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the '@Pointcut' annotation define in a Spring application?"
  answers:
    - option: "A reusable pointcut expression."
      correct: true
    - option: "A direct call to a join point."
      correct: false
    - option: "An advice that is applied globally."
      correct: false
    - option: "A specific method to be executed before a database transaction."
      correct: false

- description: "What role does 'Caching' play in Aspect-Oriented Programming within Spring?"
  answers:
    - option: "It's used by a cacheable aspect to store and retrieve method call results."
      correct: true
    - option: "It defines the execution order of advice."
      correct: false
    - option: "It's a pointcut expression that matches database transaction methods."
      correct: false
    - option: "It's an annotation that disables all aspects in the application."
      correct: false
- description: "What is the primary purpose of Aspect-Oriented Programming (AOP)?"
  answers:
    - option: "To create a more readable code and avoid duplicate code."
      correct: true
    - option: "To replace Object-Oriented Programming (OOP)."
      correct: false
    - option: "To enhance the performance of applications."
      correct: false
    - option: "To simplify database operations."
      correct: false
    - option: "To manage application security protocols."
      correct: false

- description: "Which problem does Aspect-Oriented Programming (AOP) solve?"
  answers:
    - option: "Implements cross-cutting concerns separately from business logic."
      correct: true
    - option: "Directly modifies business logic for better performance."
      correct: false
    - option: "Eliminates the need for programming interfaces."
      correct: false
    - option: "Automates the backup of application data."
      correct: false
    - option: "Reduces the number of objects created in an application."
      correct: false

- description: "What are typical cross-cutting concerns in AOP?"
  answers:
    - option: "Logging and security."
      correct: true
    - option: "Data modeling and database management."
      correct: false
    - option: "User interface design and responsiveness."
      correct: false
    - option: "Business logic and data validation."
      correct: false
    - option: "Application configuration and setup."
      correct: false

- description: "Which are NOT typical cross-cutting concerns handled by AOP?"
  answers:
    - option: "User authentication and authorization."
      correct: false
    - option: "Business logic and core functionality."
      correct: true
    - option: "Performance monitoring."
      correct: false
    - option: "Transaction management."
      correct: false
    - option: "Application security."
      correct: false

- description: "What issue arises from not addressing cross-cutting concerns via AOP?"
  answers:
    - option: "Code duplication."
      correct: true
    - option: "Decreased application performance."
      correct: false
    - option: "Increased network traffic."
      correct: false
    - option: "UI responsiveness."
      correct: false
    - option: "Database locks."
      correct: false

- description: "How does AOP complement Object-Oriented Programming (OOP)?"
  answers:
    - option: "By separating concerns that cannot be resolved by OOP alone."
      correct: true
    - option: "By replacing the need for inheritance in OOP."
      correct: false
    - option: "By introducing a new method of data encapsulation."
      correct: false
    - option: "By eliminating the need for polymorphism."
      correct: false
    - option: "By reducing the use of interfaces and abstract classes."
      correct: false

- description: "Can excessive use of AOP lead to problems in code management?"
  answers:
    - option: "Yes, it can make the code harder to read, debug, or maintain."
      correct: true
    - option: "No, AOP simplifies code management in all cases."
      correct: false
    - option: "No, AOP usage has no impact on code complexity."
      correct: false
    - option: "Yes, but only if used without OOP principles."
      correct: false
    - option: "No, AOP reduces the overall size of the codebase, simplifying management."
      correct: false

- description: "True or False: AOP should be used as a replacement for OOP."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "True or False: Implementing AOP can eliminate the need for code duplication."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "True or False: AOP cannot handle concerns like logging or transaction management."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "What is a downside of not using AOP for cross-cutting concerns?"
  answers:
    - option: "Mixing of business logic with other concerns, making it hard to maintain."
      correct: true
    - option: "Improved application performance."
      correct: false
    - option: "Reduced memory usage."
      correct: false
    - option: "Easier debugging."
      correct: false

- description: "What is Aspect-Oriented Programming primarily used for?"
  answers:
    - option: "Separating cross-cutting concerns from business logic."
      correct: true
    - option: "Creating graphical user interfaces."
      correct: false
    - option: "Managing database connections."
      correct: false
    - option: "Optimizing algorithm performance."
      correct: false

- description: "True or False: Without AOP, cross-cutting concerns can lead to scattered and tangled code."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which aspect of software development does AOP aim to improve?"
  answers:
    - option: "Modularity by separating concerns."
      correct: true
    - option: "Data storage and retrieval."
      correct: false
    - option: "Compilation time of applications."
      correct: false
    - option: "Network latency."
      correct: false

- description: "True or False: AOP is intended to be used in conjunction with OOP, not as a standalone approach."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "How does AOP handle modifications to business logic?"
  answers:
    - option: "By allowing behavior modification without changing the business logic itself."
      correct: true
    - option: "By directly modifying the source code of business logic components."
      correct: false
    - option: "By compiling business logic into separate executables."
      correct: false
    - option: "By encrypting business logic to secure it from external modifications."
      correct: false

- description: "What defines a 'cross-cutting concern' in software development?"
  answers:
    - option: "A concern that impacts multiple parts of an application, like logging or security."
      correct: true
    - option: "A concern related to the graphical layout of an application."
      correct: false
    - option: "A feature specific to a single module of an application."
      correct: false
    - option: "The main functionality or business logic of an application."
      correct: false


- description: "True or False: Cross-cutting concerns are easily managed with traditional OOP alone."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "What role does 'Caching' play in Aspect-Oriented Programming?"
  answers:
    - option: "It's used to store and retrieve results of method calls to improve performance."
      correct: true
    - option: "It's primarily used for user authentication."
      correct: false
    - option: "It serves as the main method for data storage."
      correct: false
    - option: "It's irrelevant and not used in AOP."
      correct: false

- description: "True or False: AOP allows for altering the behavior of code without modifying the code itself."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "In Aspect-Oriented Programming, what is an 'Aspect'?"
  answers:
    - option: "A modularization of a concern that cuts across multiple classes."
      correct: true
    - option: "A specific implementation of a database access object."
      correct: false
    - option: "A design pattern used in software development."
      correct: false
    - option: "A core feature of an application's business logic."
      correct: false

- description: "What is one of the key benefits of using Aspect-Oriented Programming?"
  answers:
    - option: "It reduces code duplication by separating cross-cutting concerns from business logic."
      correct: true
    - option: "It increases the speed of the application by optimizing the backend logic."
      correct: false
    - option: "It simplifies the user interface design."
      correct: false
    - option: "It automatically generates database schemas."
      correct: false

- description: "True or False: Logging, performance monitoring, and security are examples of concerns that can be addressed by AOP."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Why is AOP considered complementary to OOP?"
  answers:
    - option: "Because it addresses concerns that are difficult to implement efficiently with OOP alone."
      correct: true
    - option: "Because it replaces the need for OOP."
      correct: false
    - option: "Because it simplifies database operations, which OOP cannot do."
      correct: false
    - option: "Because it is a newer programming paradigm that makes OOP obsolete."
      correct: false

- description: "What problem does excessive use of AOP introduce?"
  answers:
    - option: "Makes the code harder to understand, debug, and maintain."
      correct: true
    - option: "Reduces application security and increases vulnerability to attacks."
      correct: false
    - option: "Significantly increases the application's memory usage."
      correct: false
    - option: "Leads to decreased application performance due to increased complexity."
      correct: false

- description: "True or False: AOP can be used to implement caching in applications to enhance performance."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false
- description: "Which of the following are benefits of using Spring Framework?"
  answers:
    - option: "It facilitates the development of testable code."
      correct: true
    - option: "It provides comprehensive infrastructure support for developing Java applications."
      correct: true
    - option: "It restricts the application to use Spring's own MVC framework."
      correct: false
    - option: "It automatically generates code for new features without developer intervention."
      correct: false
    - option: "It decreases application performance due to its complexity."
      correct: false

- description: "In the context of Spring Framework, what roles do beans play?"
  answers:
    - option: "Beans are the backbone of your application, as they constitute its central components."
      correct: true
    - option: "Beans are managed by the Spring container, which creates and manages their lifecycle."
      correct: true
    - option: "Beans must be manually instantiated and injected by the developer."
      correct: false
    - option: "Beans are transient objects that are created and destroyed with each request."
      correct: false
    - option: "Beans can only be used in web applications developed with Spring MVC."
      correct: false
- description: "Which of the following are types of AOP advice in Spring?"
  answers:
    - option: "Before advice"
      correct: true
    - option: "After advice"
      correct: true
    - option: "Around advice"
      correct: true
    - option: "During advice"
      correct: false
    - option: "PostConstruct advice"
      correct: false

- description: "What can a join point represent in Spring AOP?"
  answers:
    - option: "Execution of a method"
      correct: true
    - option: "Instantiation of an object"
      correct: true
    - option: "Access to a field"
      correct: true
    - option: "Compilation of a class"
      correct: false
    - option: "Initialization of a static field"
      correct: false
- description: "Which of the following are valid pointcut designators in Spring AOP?"
  answers:
    - option: "execution()"
      correct: true
    - option: "within()"
      correct: true
    - option: "bean()"
      correct: true
    - option: "call()"
      correct: false
    - option: "instanceof()"
      correct: false

- description: "What aspects can be applied to using Spring AOP?"
  answers:
    - option: "Logging"
      correct: true
    - option: "Transaction management"
      correct: true
    - option: "Security"
      correct: false
    - option: "Data validation"
      correct: false
    - option: "Authentication"
      correct: false

- description: "Which pointcut expressions are correctly matched with their description?"
  answers:
    - option: "'execution()' matches method execution join points"
      correct: true
    - option: "'within()' limits matching to specific types"
      correct: true
    - option: "'args()' matches methods with certain arguments"
      correct: true
    - option: "'@target()' matches join points where the bean has a given annotation"
      correct: false
    - option: "'@args()' matches if the passed argument at runtime has the given annotation"
      correct: false

- description: "What information can be obtained from the JoinPoint argument in an advice?"
  answers:
    - option: "Method signature"
      correct: true
    - option: "Method arguments"
      correct: true
    - option: "Target object's class name"
      correct: false
    - option: "Return value of the method"
      correct: false
    - option: "Exception thrown by the method"
      correct: false

- description: "In which scenarios can AOP be beneficial?"
  answers:
    - option: "To implement cross-cutting concerns such as logging and security"
      correct: true
    - option: "To avoid boilerplate code by applying common logic across multiple points"
      correct: true
    - option: "To enhance the performance of database operations"
      correct: false
    - option: "To manage application configuration and environment setup"
      correct: false
    - option: "To replace traditional object-oriented programming entirely"
      correct: false

- description: "What are the benefits of using Spring AOP?"
  answers:
    - option: "Separation of cross-cutting concerns from business logic"
      correct: true
    - option: "Improved code readability and maintainability"
      correct: true
    - option: "Increased application performance and efficiency"
      correct: false
    - option: "Automatic generation of web service endpoints"
      correct: false
    - option: "Dynamic alteration of object behavior at runtime without changing its bytecode"
      correct: false

- description: "Which statements are true regarding Spring AOP proxies?"
  answers:
    - option: "A JDK dynamic proxy is used for beans that implement at least one interface"
      correct: true
    - option: "CGLIB proxies are used for beans that do not implement any interfaces"
      correct: true
    - option: "CGLIB proxies can override final methods"
      correct: false
    - option: "JDK dynamic proxies can proxy classes without interfaces"
      correct: false
    - option: "All proxies support self-invocation within target object methods"
      correct: false

- description: "How can we enable AspectJ support in a Spring application?"
  answers:
    - option: "By annotating the configuration class with @EnableAspectJAutoProxy"
      correct: true
    - option: "By declaring aspects as beans in the Spring application context"
      correct: true
    - option: "By including the AspectJ runtime library in the project dependencies"
      correct: false
    - option: "By using <aop:aspectj-autoproxy> in XML configuration"
      correct: false
    - option: "By manually creating proxy objects for all beans"
      correct: false

- description: "The @Before advice is executed after the join point method completes."
  answers:
    - option: "True"
      correct: false
    - option: "False"
      correct: true

- description: "The @AfterReturning advice can modify the return value of the join point method."
  answers:
    - option: "True"
      correct: false
    - option: "False"
      correct: true

- description: "Pointcut expressions can use logical operators such as &&, ||, and !."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Spring AOP can be applied to private methods of a bean."
  answers:
    - option: "True"
      correct: false
    - option: "False"
      correct: true

- description: "Weaving in Spring AOP occurs at compile time."
  answers:
    - option: "True"
      correct: false
    - option: "False"
      correct: true

- description: "What is the primary purpose of the AOP module in Spring?"
  answers:
    - option: "To provide declarative enterprise services, especially as a replacement for EJBs."
      correct: true
    - option: "To replace the Spring IoC container."
      correct: false
    - option: "To facilitate the rapid development of web applications."
      correct: false
    - option: "To offer a superior alternative to Java Persistence API."
      correct: false

- description: "Which of the following correctly explains the concept of 'weaving' in Spring AOP?"
  answers:
    - option: "It's the process of applying aspects to target objects."
      correct: true
    - option: "It's a type of advice used in Spring AOP."
      correct: false
    - option: "It refers to the creation of pointcut expressions."
      correct: false
    - option: "It is the name of a special Spring bean."
      correct: false

- description: "What is the function of the @Pointcut annotation in Spring AOP?"
  answers:
    - option: "To declare a pointcut expression."
      correct: true
    - option: "To implement an advice."
      correct: false
    - option: "To create a new AspectJ aspect."
      correct: false
    - option: "To inject dependencies into Spring beans."
      correct: false

- description: "Which advice type should you use to execute code regardless of the outcome of the join point method?"
  answers:
    - option: "@After advice"
      correct: true
    - option: "@Before advice"
      correct: false
    - option: "@AfterReturning advice"
      correct: false
    - option: "@AfterThrowing advice"
      correct: false

- description: "What is required to define an aspect in Spring AOP?"
  answers:
    - option: "A class annotated with @Aspect"
      correct: true
    - option: "A special XML configuration file"
      correct: false
    - option: "A Java interface"
      correct: false
    - option: "A property file listing all pointcuts"
      correct: false

- description: "In Spring AOP, what is 'advice'?"
  answers:
    - option: "Code that is executed at a certain point during program execution."
      correct: true
    - option: "A type of Spring bean."
      correct: false
    - option: "A configuration setting for database connections."
      correct: false
    - option: "A dependency injection technique."
      correct: false

- description: "Which type of AOP proxy does Spring use by default?"
  answers:
    - option: "JDK dynamic proxy for beans with interfaces."
      correct: true
    - option: "CGLIB proxy for all beans."
      correct: false
    - option: "Java Reflection for proxy creation."
      correct: false
    - option: "AspectJ for weaving aspects at compile time."
      correct: false

- description: "What does the 'within' pointcut designator target?"
  answers:
    - option: "All join points within certain types."
      correct: true
    - option: "Only the execution of methods annotated with a specific annotation."
      correct: false
    - option: "Join points where the arguments are instances of the given types."
      correct: false
    - option: "Beans with names that match a given pattern."
      correct: false

- description: "How does the @EnableAspectJAutoProxy annotation affect a Spring application?"
  answers:
    - option: "It enables support for handling aspects with AspectJ annotations."
      correct: true
    - option: "It explicitly disables the use of AOP within the application."
      correct: false
    - option: "It switches the application context to use XML configuration."
      correct: false
    - option: "It enables the application to use direct JDBC connections without a datasource."
      correct: false

- description: "Which of the following is true about the 'execution' pointcut designator?"
  answers:
    - option: "It matches method execution join points."
      correct: true
    - option: "It is used to define bean names for AOP proxies."
      correct: false
    - option: "It matches constructors of beans."
      correct: false
    - option: "It is used to inject dependencies into aspects."
      correct: false

- description: "Is it possible to apply multiple advices to the same join point?"
  answers:
    - option: "Yes, and the order can be controlled using the @Order annotation or implementing the Ordered interface."
      correct: true
    - option: "No, a join point can only be associated with one advice."
      correct: false
    - option: "Yes, but they will be executed in a random order."
      correct: false
    - option: "No, this would result in a conflict and cause an exception at runtime."
      correct: false

- description: "What is the role of the @AfterThrowing advice in Spring AOP?"
  answers:
    - option: "It executes advice code if a method throws an exception."
      correct: true
    - option: "It throws an exception after a method completes execution."
      correct: false
    - option: "It catches and handles exceptions thrown by advice code."
      correct: false
    - option: "It retries the method execution if an exception is thrown."
      correct: false

- description: "Can Spring AOP be used to advise static methods?"
  answers:
    - option: "No, Spring AOP cannot advise static methods."
      correct: true
    - option: "Yes, Spring AOP can advise any method, including static methods."
      correct: false
    - option: "Yes, but only if the class is annotated with @AspectJ."
      correct: false
    - option: "No, because static methods belong to the class, not to the Spring context."
      correct: false

- description: "What mechanism does Spring AOP use to create a proxy for a bean?"
  answers:
    - option: "Runtime weaving"
      correct: true
    - option: "Compile-time weaving"
      correct: false
    - option: "Load-time weaving"
      correct: false
    - option: "Manual weaving by the developer"
      correct: false

- description: "What is the significance of the @Aspect annotation in Spring AOP?"
  answers:
    - option: "It marks a class as an aspect for modular cross-cutting concerns."
      correct: true
    - option: "It is used to create a new bean in the Spring context."
      correct: false
    - option: "It indicates that a class should be proxied using CGLIB."
      correct: false
    - option: "It designates a method as a pointcut within the application."
      correct: false

- description: "How do @Before and @After advices differ in their execution in relation to the join point?"
  answers:
    - option: "@Before advice runs before the join point, while @After advice runs after the join point regardless of its outcome."
      correct: true
    - option: "Both @Before and @After advices run before the join point."
      correct: false
    - option: "Both @Before and @After advices run after the join point."
      correct: false
    - option: "@Before advice runs after the join point, while @After advice runs before the join point."
      correct: false

- description: "Which advice type is executed around a join point, allowing for pre- and post-invocation behavior modification?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false

- description: "Can AOP advice alter the execution flow of a join point?"
  answers:
    - option: "Yes, particularly with Around advice, by not proceeding with the join point or by modifying the arguments."
      correct: true
    - option: "No, AOP advice can only observe and not alter the execution flow."
      correct: false
    - option: "Yes, but only by throwing an exception from the advice."
      correct: false
    - option: "No, AOP advice is strictly for logging purposes and cannot alter execution."
      correct: false

- description: "What is required for an @Aspect class to be recognized and managed by Spring?"
  answers:
    - option: "The class must be annotated with @Aspect and component-scanned or manually declared as a bean."
      correct: true
    - option: "The class must be located in the 'aspects' package."
      correct: false
    - option: "The class needs to implement a special AOP interface provided by Spring."
      correct: false
    - option: "The class must be declared in a special XML configuration file."
      correct: false

- description: "What is the purpose of the 'pointcut' in Spring AOP?"
  answers:
    - option: "To define the join points of interest where aspects should be applied."
      correct: true
    - option: "To specify the data source for database operations."
      correct: false
    - option: "To inject dependencies into Spring beans."
      correct: false
    - option: "To configure transaction management across multiple services."
      correct: false

- description: "Does Spring AOP support full AspectJ annotation syntax within pointcut expressions?"
  answers:
    - option: "Yes, Spring AOP supports the use of AspectJ annotation syntax in pointcut expressions."
      correct: true
    - option: "No, Spring AOP uses a proprietary pointcut expression language."
      correct: false
    - option: "Yes, but only a subset of AspectJ annotations are supported."
      correct: false
    - option: "No, Spring AOP and AspectJ are completely incompatible."
      correct: false

- description: "Is it possible to advise private methods using Spring AOP?"
  answers:
    - option: "No, Spring AOP does not support advising private methods due to proxy-based nature."
      correct: true
    - option: "Yes, all methods including private methods can be advised using Spring AOP."
      correct: false
    - option: "Yes, but only if the private method is annotated with @Advisable."
      correct: false
    - option: "No, because advising private methods violates encapsulation principles."
      correct: false

- description: "Which of the following correctly describes the 'weaving' process in Spring AOP?"
  answers:
    - option: "Weaving is the process of linking aspects with other application types or objects to create an advised object."
      correct: true
    - option: "Weaving refers to the dynamic creation of web pages in Spring MVC."
      correct: false
    - option: "Weaving is a database operation for merging data from multiple tables."
      correct: false
    - option: "Weaving is the compilation step where Spring beans are instantiated."
      correct: false

- description: "What does the @EnableAspectJAutoProxy annotation enable?"
  answers:
    - option: "It enables the support for handling aspects defined with AspectJ annotations."
      correct: true
    - option: "It disables all AOP functionalities in the Spring application."
      correct: false
    - option: "It switches the AOP implementation from Spring AOP to pure AspectJ."
      correct: false
    - option: "It automatically generates JDBC queries for repository classes."
      correct: false
- description: "What is the primary purpose of AOP (Aspect-Oriented Programming) in Spring?"
  answers:
    - option: "To separate cross-cutting concerns from business logic"
      correct: true
    - option: "To replace object-oriented programming"
      correct: false
    - option: "To manage database connections"
      correct: false
    - option: "To provide annotations for data validation"
      correct: false

- description: "Which Spring AOP concept is responsible for determining when advice should be executed?"
  answers:
    - option: "Pointcut"
      correct: true
    - option: "Join point"
      correct: false
    - option: "Aspect"
      correct: false
    - option: "Weaving"
      correct: false

- description: "In Spring AOP, what is the role of 'Advice'?"
  answers:
    - option: "It defines the code to be executed at a certain join point"
      correct: true
    - option: "It injects dependencies into Spring beans"
      correct: false
    - option: "It creates AOP proxies"
      correct: false
    - option: "It defines the data model for persistence"
      correct: false

- description: "What does the '@Around' advice do in Spring AOP?"
  answers:
    - option: "It allows executing custom code before and after the method invocation"
      correct: true
    - option: "It injects dependencies into the beans"
      correct: false
    - option: "It only executes after a method completes successfully"
      correct: false
    - option: "It manages transactions"
      correct: false

- description: "How does Spring AOP implement cross-cutting concerns?"
  answers:
    - option: "Through runtime weaving using proxies"
      correct: true
    - option: "By recompiling source code"
      correct: false
    - option: "Using compile-time enhancements"
      correct: false
    - option: "Through static code analysis"
      correct: false

- description: "Which two types of AOP proxies does Spring support?"
  answers:
    - option: "JDK dynamic proxies and CGLIB proxies"
      correct: true
    - option: "JVM and Docker proxies"
      correct: false
    - option: "HTTP and HTTPS proxies"
      correct: false
    - option: "Singleton and Prototype proxies"
      correct: false

- description: "What limitation do both JDK dynamic proxies and CGLIB proxies share in Spring AOP?"
  answers:
    - option: "They do not support self-invocation"
      correct: true
    - option: "They cannot be used with private methods"
      correct: false
    - option: "They only work with stateless beans"
      correct: false
    - option: "They require classes to implement interfaces"
      correct: false

- description: "What does the '@EnableAspectJAutoProxy' annotation do?"
  answers:
    - option: "It enables support for handling components marked with @Aspect"
      correct: true
    - option: "It automatically generates JDBC proxies for database access"
      correct: false
    - option: "It enables automatic transaction management"
      correct: false
    - option: "It creates dynamic web proxies for controller classes"
      correct: false

- description: "In Spring AOP, what is a 'Join Point'?"
  answers:
    - option: "A point during the execution of a program, such as method execution"
      correct: true
    - option: "A point where an application connects to the database"
      correct: false
    - option: "A breakpoint set for debugging purposes"
      correct: false
    - option: "A point where two aspects intersect"
      correct: false

- description: "Which of the following is a true statement about 'Pointcut' expressions in Spring AOP?"
  answers:
    - option: "They define which methods in the application are intercepted by advices"
      correct: true
    - option: "They are used to inject dependencies into Spring beans"
      correct: false
    - option: "They represent the code that is executed at a join point"
      correct: false
    - option: "They are annotations used to mark transactional methods"
      correct: false

- description: "What is the purpose of the 'ProceedingJoinPoint' in Spring AOP?"
  answers:
    - option: "It allows method execution to be proceeded with or without modifications"
      correct: true
    - option: "It prevents the application from proceeding to the next pointcut"
      correct: false
    - option: "It joins two separate aspects into a single advice"
      correct: false
    - option: "It marks the starting point of a transaction in the application"
      correct: false

- description: "True or False: The 'Before' advice in Spring AOP is executed before the join point method execution."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "True or False: In Spring AOP, 'AfterReturning' advice is executed only if a method completes successfully."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "True or False: 'AfterThrowing' advice in Spring AOP is used to handle exceptions thrown by advised methods."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "How many types of advice does Spring support?"
  answers:
    - option: "5"
      correct: true
    - option: "3"
      correct: false
    - option: "6"
      correct: false
    - option: "4"
      correct: false

- description: "Which advice types are suitable for exception handling in Spring AOP?"
  answers:
    - option: "AfterThrowing and Around"
      correct: true
    - option: "Before and After"
      correct: false
    - option: "AfterReturning and Before"
      correct: false
    - option: "After and BeforeReturning"
      correct: false

- description: "What annotation is required to enable AspectJ auto-proxying in Spring?"
  answers:
    - option: "@EnableAspectJAutoProxy"
      correct: true
    - option: "@Aspect"
      correct: false
    - option: "@Configuration"
      correct: false
    - option: "@ComponentScan"
      correct: false

- description: "What does 'weaving' refer to in the context of Spring AOP?"
  answers:
    - option: "The process of linking aspects with other application types or objects to create an advised object"
      correct: true
    - option: "The act of injecting dependencies into Spring beans"
      correct: false
    - option: "The creation of bean instances within the Spring container"
      correct: false
    - option: "The process of mapping application URLs to controller methods"
      correct: false

- description: "Which statement is true about the 'execution' pointcut designator in Spring AOP?"
  answers:
    - option: "It matches join points based on method signatures"
      correct: true
    - option: "It only matches bean creation lifecycle events"
      correct: false
    - option: "It is used to specify the types of beans to inject"
      correct: false
    - option: "It matches methods after they have been executed, regardless of outcome"
      correct: false

- description: "In Spring AOP, which proxy mechanism is used when a target object does not implement any interfaces?"
  answers:
    - option: "CGLIB proxy"
      correct: true
    - option: "JDK dynamic proxy"
      correct: false
    - option: "JPA entity manager proxy"
      correct: false
    - option: "SOAP web service proxy"
      correct: false

- description: "True or False: Pointcut expressions in Spring AOP can be combined using logical operators such as '&&', '||', and '!' for complex matching."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice in Spring AOP can be used to execute code both before and after a method execution, providing the most control over the method invocation?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false

- description: "What is required for Spring AOP to manage aspects and advices within a Spring application?"
  answers:
    - option: "@EnableAspectJAutoProxy annotation in the configuration"
      correct: true
    - option: "Explicit configuration of each advised method"
      correct: false
    - option: "Manual creation of proxies for each bean"
      correct: false
    - option: "Defining a special AspectManager bean"
      correct: false

- description: "Which proxy mechanism cannot be used for classes that are declared 'final' in Spring AOP?"
  answers:
    - option: "CGLIB Proxy"
      correct: true
    - option: "JDK Dynamic Proxy"
      correct: false
    - option: "JPA Entity Manager Proxy"
      correct: false
    - option: "HTTP Proxy"
      correct: false

- description: "What must be the visibility of methods in a Spring bean to be proxied using JDK dynamic proxies?"
  answers:
    - option: "Public"
      correct: true
    - option: "Protected"
      correct: false
    - option: "Private"
      correct: false
    - option: "No specific visibility required"
      correct: false

- description: "True or False: Spring CGLIB proxies can intercept calls to private methods."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "True or False: Methods that are static can be advised using Spring AOP."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "In Spring AOP, which types of methods can CGLIB proxies not intercept?"
  answers:
    - option: "Final methods"
      correct: true
    - option: "Public methods"
      correct: false
    - option: "Protected methods"
      correct: false
    - option: "Methods in a final class"
      correct: true
    - option: "Static methods"
      correct: false

- description: "What visibility must methods have to be proxied by CGLIB in Spring AOP?"
  answers:
    - option: "Public, protected, or package-private"
      correct: true
    - option: "Private"
      correct: false
    - option: "Protected only"
      correct: false
    - option: "Public only"
      correct: false
    - option: "No specific visibility required"
      correct: false

- description: "True or False: JDK Dynamic Proxies in Spring AOP can proxy classes that do not implement any interfaces."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "True or False: Spring AOP supports advising final classes using JDK Dynamic Proxies."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "Why are self-invocations not intercepted by Spring AOP proxies?"
  answers:
    - option: "Because the proxy is bypassed when the call is made from within the target object itself."
      correct: true
    - option: "Spring AOP does not support internal method calls."
      correct: false
    - option: "Because self-invocations are considered private methods."
      correct: false
    - option: "Due to Java language limitations."
      correct: false

- description: "What type of proxy does Spring AOP use by default when a bean implements an interface?"
  answers:
    - option: "JDK Dynamic Proxy"
      correct: true
    - option: "CGLIB Proxy"
      correct: false
    - option: "JPA Proxy"
      correct: false
    - option: "Direct bean instance"
      correct: false

- description: "True or False: To ensure CGLIB proxies are used for beans implementing interfaces, the '@EnableAspectJAutoProxy(proxyTargetClass = true)' annotation must be applied."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which of the following is a limitation of using JDK dynamic proxies in Spring AOP?"
  answers:
    - option: "They can only proxy interfaces, not classes."
      correct: true
    - option: "They significantly reduce application performance."
      correct: false
    - option: "They can only be applied to static methods."
      correct: false
    - option: "They require the proxied classes to be declared final."
      correct: false

- description: "True or False: In Spring AOP, accessing a proxied method from within the same class will result in the advice being applied."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "What annotation enables the detection and configuration of AspectJ aspects within Spring?"
  answers:
    - option: "@EnableAspectJAutoProxy"
      correct: true
    - option: "@Aspect"
      correct: false
    - option: "@Configuration"
      correct: false
    - option: "@ComponentScan"
      correct: false

- description: "Which proxy type allows for method interception in classes without interfaces?"
  answers:
    - option: "CGLIB Proxy"
      correct: true
    - option: "JDK Dynamic Proxy"
      correct: false
    - option: "SOAP Web Service Proxy"
      correct: false
    - option: "RMI Proxy"
      correct: false

- description: "Which types of AOP proxies does Spring support?"
  answers:
    - option: "JDK dynamic proxies and CGLIB proxies"
      correct: true
    - option: "HTTP and HTTPS proxies"
      correct: false
    - option: "JVM and Docker proxies"
      correct: false
    - option: "Singleton and Prototype proxies"
      correct: false
    - option: "SOAP web service proxy"
      correct: false

- description: "What is required for a Spring bean method to be proxied using CGLIB?"
  answers:
    - option: "The bean class should not be final"
      correct: true
    - option: "The method should not be declared as final"
      correct: true
    - option: "The method must be static"
      correct: false
    - option: "The method must be private"
      correct: false
    - option: "The class must implement an interface"
      correct: false

- description: "True or False: Spring AOP can advise private methods."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "True or False: Static methods can be advised by Spring AOP."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "How many types of advice does Spring AOP support?"
  answers:
    - option: "5"
      correct: true
    - option: "3"
      correct: false
    - option: "4"
      correct: false
    - option: "6"
      correct: false
    - option: "2"
      correct: false

- description: "What is the purpose of the Before advice in Spring AOP?"
  answers:
    - option: "It is executed before the join point method execution."
      correct: true
    - option: "It is executed after the join point method execution."
      correct: false
    - option: "It replaces the join point method execution."
      correct: false
    - option: "It is executed only if the join point method throws an exception."
      correct: false
    - option: "It is used to modify the return value of the join point method."
      correct: false

- description: "True or False: The AfterReturning advice in Spring AOP is executed even if a join point method throws an exception."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "Which advice allows for surrounding a join point method execution in Spring AOP?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false

- description: "True or False: AfterThrowing advice in Spring AOP is used to handle exceptions thrown by advised methods."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the After advice do in Spring AOP?"
  answers:
    - option: "It is executed after the join point method execution, regardless of the method's outcome."
      correct: true
    - option: "It modifies the return value of the join point method."
      correct: false
    - option: "It prevents the join point method from executing."
      correct: false
    - option: "It is executed before the join point method to modify its arguments."
      correct: false
    - option: "It dynamically changes the implementation of the join point method."
      correct: false

- description: "For capturing and using the return value of a join point method in Spring AOP, which advice type should be used?"
  answers:
    - option: "AfterReturning"
      correct: true
    - option: "Before"
      correct: false
    - option: "After"
      correct: false
    - option: "Around"
      correct: false
    - option: "AfterThrowing"
      correct: false

- description: "True or False: Around advice in Spring AOP can modify the arguments passed to the join point method."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which Spring AOP advice is executed regardless of whether the join point method completes successfully or throws an exception?"
  answers:
    - option: "After advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false
    - option: "Around advice"
      correct: false

- description: "In Spring AOP, what is required to access the exception thrown by a join point method using AfterThrowing advice?"
  answers:
    - option: "Defining a 'throwing' parameter in the advice method"
      correct: true
    - option: "Using the ProceedingJoinPoint argument"
      correct: false
    - option: "Invoking a special AOP exception handling method"
      correct: false
    - option: "The method must be annotated with @ExceptionHandler"
      correct: false
    - option: "The use of @AfterThrowing annotation without any additional parameters"
      correct: false

- description: "Which two advices can you use if you want to execute code before and after the successful execution of a join point method, but not when an exception is thrown?"
  answers:
    - option: "Before and AfterReturning"
      correct: true
    - option: "Around and AfterThrowing"
      correct: false
    - option: "After and AfterThrowing"
      correct: false
    - option: "Before and After"
      correct: false
    - option: "AfterReturning and AfterThrowing"
      correct: false

- description: "True or False: The ProceedingJoinPoint is only used with the Around advice in Spring AOP."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is the primary use of Before advice in Spring AOP?"
  answers:
    - option: "Logging before a method execution"
      correct: true
    - option: "Transaction management after a method execution"
      correct: false
    - option: "Changing the return value of a method"
      correct: false
    - option: "Caching method return values"
      correct: false

- description: "What enables the execution of additional behavior after a method throws an exception in Spring AOP?"
  answers:
    - option: "AfterThrowing advice"
      correct: true
    - option: "AfterReturning advice"
      correct: false
    - option: "Around advice"
      correct: false
    - option: "Before advice"
      correct: false

- description: "True or False: After advice is used for executing code after a method execution, regardless of its outcome, including throwing exceptions."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice type would you use to implement retry logic on a method that may throw an exception?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "AfterThrowing advice"
      correct: false
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false

- description: "What aspect of a method's execution can the Around advice in Spring AOP not influence?"
  answers:
    - option: "The execution of the method itself"
      correct: false
    - option: "The arguments passed to the method"
      correct: false
    - option: "The return value of the method"
      correct: false
    - option: "None, it can influence all aspects of a method's execution."
      correct: true

- description: "In Spring AOP, which advice type specifically targets the scenario where a join point method execution does not throw any exceptions?"
  answers:
    - option: "AfterReturning advice"
      correct: true
    - option: "AfterThrowing advice"
      correct: false
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false

- description: "What mechanism does the AfterReturning advice use to access the return value of the join point method in Spring AOP?"
  answers:
    - option: "Specifying a 'returning' parameter in the advice method signature"
      correct: true
    - option: "Using the ProceedingJoinPoint.proceed() method"
      correct: false
    - option: "The return value cannot be accessed by AfterReturning advice"
      correct: false
    - option: "Invoking a special return handling method provided by Spring AOP"
      correct: false

- description: "True or False: You can change the return value of a join point method using Before advice in Spring AOP."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "Which of the following is NOT a valid advice type in Spring AOP?"
  answers:
    - option: "AfterFinally advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "Around advice"
      correct: false

- description: "True or False: Around advice in Spring AOP can be used to completely prevent the execution of the join point method."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice execution order is correct when multiple advices are applied to a single join point in Spring AOP?"
  answers:
    - option: "1. Before advice, 2. Around advice (before proceeding), 3. Actual method execution, 4. Around advice (after proceeding), 5. AfterReturning/AfterThrowing, 6. After advice"
      correct: true
    - option: "1. Around advice, 2. Before advice, 3. Actual method execution, 4. AfterReturning advice, 5. AfterThrowing advice"
      correct: false
    - option: "1. AfterReturning advice, 2. Around advice, 3. Before advice, 4. Actual method execution"
      correct: false
    - option: "1. After advice, 2. Before advice, 3. Actual method execution, 4. Around advice"
      correct: false

- description: "For a method that returns a value, which advice types allow interacting with that value? (Select two)"
  answers:
    - option: "AfterReturning"
      correct: true
    - option: "Around"
      correct: true
    - option: "After"
      correct: false
    - option: "Before"
      correct: false
    - option: "AfterThrowing"
      correct: false

- description: "True or False: The ProceedingJoinPoint can only be used within the context of an Around advice to invoke the next interceptor in the advice chain."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice should you use to execute code after a method execution, only if the method exits by throwing an exception?"
  answers:
    - option: "AfterThrowing advice"
      correct: true
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "Before advice"
      correct: false

- description: "True or False: After advice is similar to finally block in try-catch statement in Java."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What annotation is commonly used to define a pointcut in Spring AOP?"
  answers:
    - option: "@Pointcut"
      correct: true
    - option: "@Aspect"
      correct: false
    - option: "@Advice"
      correct: false
    - option: "@JoinPoint"
      correct: false

- description: "In Spring AOP, which advice allows custom behavior both before and after the advised method's execution, and also to skip the advised method's execution entirely?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false

- description: "What is required to enable AspectJ support in Spring?"
  answers:
    - option: "@EnableAspectJAutoProxy annotation"
      correct: true
    - option: "@AspectJSupport annotation"
      correct: false
    - option: "@EnableSpringAspects annotation"
      correct: false
    - option: "@SupportAspectJ annotation"
      correct: false
    - option: "@Aspect annotation"
      correct: false

- description: "True or False: @EnableAspectJAutoProxy automatically detects beans annotated with @Aspect and applies them as aspects."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "To use AspectJ annotations for defining aspects in Spring, which of the following is necessary in your configuration class?"
  answers:
    - option: "@EnableAspectJAutoProxy"
      correct: true
    - option: "@Aspect"
      correct: false
    - option: "@Configuration"
      correct: false
    - option: "@ComponentScan"
      correct: false

- description: "What does the @EnableAspectJAutoProxy(proxyTargetClass = true) annotation do?"
  answers:
    - option: "Forces the use of CGLIB proxies instead of JDK dynamic proxies"
      correct: true
    - option: "Enables the detection of @Aspect annotations"
      correct: false
    - option: "Disables proxying for classes without interfaces"
      correct: false
    - option: "Forces Spring to only use JDK dynamic proxies"
      correct: false

- description: "True or False: The presence of @EnableAspectJAutoProxy in a configuration class is sufficient to enable support for handling components marked with @Aspect."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is the impact of setting proxyTargetClass=true in @EnableAspectJAutoProxy?"
  answers:
    - option: "It instructs Spring to create CGLIB proxies for classes that implement interfaces."
      correct: true
    - option: "It disables proxy creation completely."
      correct: false
    - option: "It enables AspectJ annotation processing."
      correct: false
    - option: "It forces the use of JDK dynamic proxies regardless of class type."
      correct: false

- description: "In what scenario is @EnableAspectJAutoProxy(proxyTargetClass = true) particularly useful?"
  answers:
    - option: "When you need to advise beans that do not implement any interfaces"
      correct: true
    - option: "When all your beans implement interfaces and you prefer JDK dynamic proxies"
      correct: false
    - option: "When you are not using Spring AOP at all"
      correct: false
    - option: "When you need to disable AOP proxies"
      correct: false

- description: "True or False: Applying @EnableAspectJAutoProxy in your Spring configuration requires additional dependencies to work with AspectJ aspects."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "Which annotation is necessary on a Spring configuration class to activate AspectJ aspects?"
  answers:
    - option: "@EnableAspectJAutoProxy"
      correct: true
    - option: "@ActivateAspectJ"
      correct: false
    - option: "@UseAspectJ"
      correct: false
    - option: "@ConfigureAspectJ"
      correct: false

- description: "Which of the following is not a function of the @EnableAspectJAutoProxy annotation?"
  answers:
    - option: "Enabling transaction management"
      correct: true
    - option: "Allowing for the use of @Aspect annotations"
      correct: false
    - option: "Creating proxies for beans that are aspects"
      correct: false
    - option: "Supporting the use of CGLIB or JDK dynamic proxies"
      correct: false

- description: "What is a direct consequence of not using @EnableAspectJAutoProxy in a Spring application that utilizes aspects?"
  answers:
    - option: "Aspects defined with @Aspect will not be processed or applied."
      correct: true
    - option: "Spring's IoC container will fail to initialize."
      correct: false
    - option: "All beans will default to using CGLIB proxies."
      correct: false
    - option: "The application will not support transaction management."
      correct: false

- description: "True or False: The @EnableAspectJAutoProxy annotation must be placed on a class annotated with @Configuration for it to take effect."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "How does @EnableAspectJAutoProxy change the default proxying mechanism used by Spring?"
  answers:
    - option: "It allows developers to choose between CGLIB and JDK dynamic proxies through the proxyTargetClass attribute."
      correct: true
    - option: "It defaults all proxying to use CGLIB, ignoring the proxyTargetClass attribute."
      correct: false
    - option: "It forces the application to use JDK dynamic proxies, regardless of the class type."
      correct: false
    - option: "It disables proxying entirely, relying on direct aspect weaving instead."
      correct: false

- description: "What must be included in a Spring application to ensure @Aspect annotations are detected and applied?"
  answers:
    - option: "@EnableAspectJAutoProxy annotation in a @Configuration class"
      correct: true
    - option: "@AspectJAutoProxyScanner in the XML configuration"
      correct: false
    - option: "Explicit bean definitions for each aspect"
      correct: false
    - option: "A custom BeanPostProcessor implementation"
      correct: false

- description: "True or False: Setting proxyTargetClass=true when using @EnableAspectJAutoProxy is mandatory for advising beans that have no interfaces."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which pointcut expression is used to match method execution at any return type within a specific package?"
  answers:
    - option: "execution(* com.example.package..*.*(..))"
      correct: true
    - option: "within(com.example.package..*)"
      correct: false
    - option: "bean(*Service)"
      correct: false
    - option: "@annotation(com.example.package.MyAnnotation)"
      correct: false
    - option: "@within(com.example.package.MyAnnotation)"
      correct: false

- description: "True or False: The pointcut expression 'within(com.example.service.*)' matches all beans in the 'com.example.service' package."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the pointcut expression 'args(java.lang.String)' indicate?"
  answers:
    - option: "Matches if the method takes a single String argument"
      correct: true
    - option: "Matches if the method returns a String"
      correct: false
    - option: "Matches any method within classes named 'String'"
      correct: false
    - option: "Matches methods annotated with @String"
      correct: false

- description: "Which pointcut expression targets methods annotated with a specific annotation?"
  answers:
    - option: "@annotation(com.example.MyAnnotation)"
      correct: true
    - option: "execution(@com.example.MyAnnotation * *(..))"
      correct: false
    - option: "within(@com.example.MyAnnotation *)"
      correct: false
    - option: "args(@com.example.MyAnnotation)"
      correct: false

- description: "True or False: '@args(com.example.Marker)' matches if the runtime type of the actual method argument is annotated with 'com.example.Marker'."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "How does the 'bean' pointcut designator function?"
  answers:
    - option: "Matches beans by their names"
      correct: true
    - option: "Matches beans by their types"
      correct: false
    - option: "Matches methods within specific beans"
      correct: false
    - option: "Matches beans annotated with specific annotations"
      correct: false

- description: "What is the purpose of the 'this' pointcut designator?"
  answers:
    - option: "Matches the proxy class type in Spring AOP"
      correct: true
    - option: "Matches the target class type directly"
      correct: false
    - option: "Matches if the bean implements an interface"
      correct: false
    - option: "Matches based on the bean's name"
      correct: false

- description: "True or False: The pointcut expression 'target(com.example.MyInterface)' matches any join point where the target object implements the specified interface."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which of the following is a correct use of the '@within' pointcut designator?"
  answers:
    - option: "Matches if the execution occurs within a type that holds the specified annotation"
      correct: true
    - option: "Matches all join points within methods of a specified class"
      correct: false
    - option: "Matches if the method's arguments are instances of the specified type"
      correct: false
    - option: "Matches methods that return instances of the specified type"
      correct: false

- description: "What does the pointcut expression 'execution(public * set*(..))' specify?"
  answers:
    - option: "Matches all public setter methods"
      correct: true
    - option: "Matches all public getter methods"
      correct: false
    - option: "Matches any method named 'set' regardless of its visibility"
      correct: false
    - option: "Matches setter methods within a specific package only"
      correct: false

- description: "Which Spring AOP pointcut expression matches a method execution within a specific package?"
  answers:
    - option: "execution(* com.example.package..*.*(..))"
      correct: true
    - option: "within(com.example.package..*)"
      correct: false
    - option: "bean(*Service)"
      correct: false
    - option: "@annotation(com.example.package.MyAnnotation)"
      correct: false
    - option: "@within(com.example.package.MyAnnotation)"
      correct: false

- description: "True or False: The 'args' pointcut designator matches methods based on the arguments they accept."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which of the following pointcut expressions correctly matches both getter and setter methods in a class?"
  answers:
    - option: "execution(* get*()) || execution(* set*(..))"
      correct: true
    - option: "within(* get*()) || within(* set*(..))"
      correct: false
    - option: "@annotation(Getter) || @annotation(Setter)"
      correct: false
    - option: "args(get*) || args(set*)"
      correct: false
    - option: "bean(get*) || bean(set*)"
      correct: false

- description: "What does the '@within' pointcut designator specify?"
  answers:
    - option: "Matches if the execution occurs within a type that holds the specified annotation"
      correct: true
    - option: "Matches all join points within methods of a specified class"
      correct: false
    - option: "Matches if the method's arguments are instances of the specified type"
      correct: false
    - option: "Matches methods that return instances of the specified type"
      correct: false

- description: "Which pointcut designator is used to match Spring beans by their names?"
  answers:
    - option: "bean"
      correct: true
    - option: "within"
      correct: false
    - option: "this"
      correct: false
    - option: "target"
      correct: false
    - option: "args"
      correct: false

- description: "True or False: The 'this' pointcut designator refers to the proxy class type in Spring AOP."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "For matching join points where the subject of the annotation has the given annotation, which pointcut designator should be used?"
  answers:
    - option: "@annotation"
      correct: true
    - option: "@args"
      correct: false
    - option: "@within"
      correct: false
    - option: "@target"
      correct: false
    - option: "args"
      correct: false

- description: "What functionality does the `ProceedingJoinPoint` provide in Spring AOP?"
  answers:
    - option: "Allows for proceeding with or modifying the execution of the advised method"
      correct: true
    - option: "Specifies the pointcuts to be applied to the advised method"
      correct: false
    - option: "Defines the return type of the advised method"
      correct: false
    - option: "Matches the advised method based on its annotations"
      correct: false

- description: "True or False: The `ProceedingJoinPoint` is only used within the context of an `@Around` advice."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which pointcut designator targets the execution of any public method within a class in a specific package?"
  answers:
    - option: "execution(public * com.example.package..*.*(..))"
      correct: true
    - option: "within(com.example.package..*)"
      correct: false
    - option: "@target(com.example.package..*)"
      correct: false
    - option: "@annotation(com.example.package..*)"
      correct: false

- description: "True or False: A single pointcut expression can use both '&&' and '||' logical operators to combine multiple conditions."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice type is NOT supported by Spring AOP?"
  answers:
    - option: "AfterFinally advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "Around advice"
      correct: false

- description: "How can you modify the arguments of a join point method in Spring AOP?"
  answers:
    - option: "Using ProceedingJoinPoint.proceed() with modified arguments"
      correct: true
    - option: "Directly modifying the arguments in a Before advice"
      correct: false
    - option: "Changing the arguments in an AfterReturning advice"
      correct: false
    - option: "Modifying the arguments in an After advice"
      correct: false

- description: "True or False: The '@args' pointcut designator matches methods if the passed argument at runtime is an instance of a specified type."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is the primary use of the '@AfterThrowing' advice in Spring AOP?"
  answers:
    - option: "To execute code after a method throws an exception"
      correct: true
    - option: "To execute code before a method execution"
      correct: false
    - option: "To wrap the method execution in a try-catch block"
      correct: false
    - option: "To modify the exception thrown by the advised method"
      correct: false

- description: "In Spring AOP, which pointcut designator is used to match join points where the target object is of a specific type?"
  answers:
    - option: "target"
      correct: true
    - option: "this"
      correct: false
    - option: "args"
      correct: false
    - option: "@within"
      correct: false

- description: "True or False: '@EnableAspectJAutoProxy' annotation is required to enable support for aspects defined with '@Aspect' annotations in Spring."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice should you use to ensure code execution both before and after the successful execution of a join point method?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "After advice"
      correct: false

- description: "True or False: The 'bean' pointcut designator can match beans by using wildcards in their names."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is required for a method to be advised by an Around advice in Spring AOP?"
  answers:
    - option: "The method must be intercepted by a matching pointcut expression."
      correct: true
    - option: "The method must be annotated with @Aspect."
      correct: false
    - option: "The method must return a specific type of object."
      correct: false
    - option: "The method must be declared within a bean annotated with @EnableAspectJAutoProxy."
      correct: false

- description: "Which pointcut expression matches a method execution for any return type within a class named 'ExampleService'?"
  answers:
    - option: "execution(* com.example.service.ExampleService.*(..))"
      correct: true
    - option: "within(com.example.service.ExampleService)"
      correct: false
    - option: "bean(ExampleService)"
      correct: false
    - option: "@target(com.example.service.ExampleService)"
      correct: false

- description: "True or False: The '@annotation' pointcut designator matches join points where the executing method is annotated with a specified annotation."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "How does the '@EnableAspectJAutoProxy(proxyTargetClass = true)' annotation affect proxy creation in Spring AOP?"
  answers:
    - option: "Forces the use of class-based (CGLIB) proxies instead of interface-based (JDK) proxies."
      correct: true
    - option: "Disables proxy creation completely."
      correct: false
    - option: "Forces all beans to be proxied regardless of being advised or not."
      correct: false
    - option: "Enables automatic detection of all beans without specifying pointcut expressions."
      correct: false
- description: "Which advice is executed regardless of whether the join point method exits normally or with an exception?"
  answers:
    - option: "After advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false
    - option: "Around advice"
      correct: false

- description: "True or False: The '@args' pointcut designator matches methods where the runtime type of any argument is annotated with a specified annotation."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "In Spring AOP, what is the purpose of the '@AfterReturning' advice?"
  answers:
    - option: "It is executed after a join point completes normally, to add additional behavior or modify the return value."
      correct: true
    - option: "It is executed before the join point to prevent method execution based on certain conditions."
      correct: false
    - option: "It handles exceptions thrown by the advised method."
      correct: false
    - option: "It is used to execute code both before and after the method execution."
      correct: false

- description: "Which of the following is a correct way to use a logical operator in a pointcut expression?"
  answers:
    - option: "@annotation(FirstAnnotation) || @annotation(SecondAnnotation)"
      correct: true
    - option: "execution(* set*(*)) && within(com.example.service.*)"
      correct: true
    - option: "@args(ExampleClass) && !bean(exampleBean)"
      correct: true
    - option: "@within(com.example.package.*) || execution(* get*())"
      correct: true
    - option: "bean(exampleService) || !@target(com.example.annotation.Custom)"
      correct: true

- description: "True or False: The 'within' pointcut designator matches join points within classes specified by the given pattern, including all methods within those classes."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the `ProceedingJoinPoint.proceed()` method do when used within an Around advice?"
  answers:
    - option: "Continues the execution of the join point method."
      correct: true
    - option: "Stops the execution of the application."
      correct: false
    - option: "Executes the join point method from the beginning."
      correct: false
    - option: "Throws an exception to halt the process."
      correct: false

- description: "Which pointcut designator should be used to intercept methods that have been annotated with a specific annotation?"
  answers:
    - option: "@annotation"
      correct: true
    - option: "execution"
      correct: false
    - option: "within"
      correct: false
    - option: "@args"
      correct: false
    - option: "@within"
      correct: false

- description: "True or False: To use Spring AOP's '@EnableAspectJAutoProxy' with class-based proxies, the 'proxyTargetClass' attribute must be set to true."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is the effect of using the 'target' pointcut designator in a Spring AOP expression?"
  answers:
    - option: "It limits the advice application to join points where the target object is of a specified type."
      correct: true
    - option: "It restricts the advice to methods that return a specific type."
      correct: false
    - option: "It matches methods based on their argument types."
      correct: false
    - option: "It specifies the exact name of the Spring bean to be advised."
      correct: false

- description: "Which advice type would you use to execute code before the join point method execution?"
  answers:
    - option: "Before advice"
      correct: true
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "Around advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false

- description: "True or False: An '@Around' advice in Spring AOP can modify the return value of the join point method."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the '@Within' pointcut designator target in Spring AOP?"
  answers:
    - option: "It matches join points within types that have the specified annotation."
      correct: true
    - option: "It targets methods annotated with a specified annotation."
      correct: false
    - option: "It matches join points where the bean name matches a specified pattern."
      correct: false
    - option: "It targets all methods within specified package paths."
      correct: false

- description: "In Spring AOP, which pointcut designator would you use to match the execution of any method named 'update' regardless of its arguments?"
  answers:
    - option: "execution(* update(..))"
      correct: true
    - option: "within(update)"
      correct: false
    - option: "@annotation(update)"
      correct: false
    - option: "args(update)"
      correct: false

- description: "What is the significance of the 'within' pointcut designator in Spring AOP?"
  answers:
    - option: "It restricts matching to join points within certain types (e.g., within a given package or class)."
      correct: true
    - option: "It matches methods based on argument types."
      correct: false
    - option: "It is used to apply advice to beans with specific names."
      correct: false
    - option: "It matches join points only if a method is annotated with a specific annotation."
      correct: false

- description: "True or False: The 'args' pointcut designator in Spring AOP can match methods with a specific number of arguments of any type."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which of the following advice types is executed regardless of whether a method exits normally or due to an exception?"
  answers:
    - option: "After advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false

- description: "In Spring AOP, what does the '@args' pointcut designator target?"
  answers:
    - option: "Methods that take an argument annotated with a given annotation"
      correct: true
    - option: "Any join point (method execution) where the arguments are instances of specified types"
      correct: false
    - option: "Beans that are defined within a specific package"
      correct: false
    - option: "Methods that return a specific type of object"
      correct: false

- description: "True or False: The 'bean' pointcut designator is used to apply advice to specific Spring beans by their IDs or names."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice type allows you to execute advice before the join point method execution in Spring AOP?"
  answers:
    - option: "Before advice"
      correct: true
    - option: "AfterReturning advice"
      correct: false
    - option: "Around advice"
      correct: false
    - option: "After advice"
      correct: false

- description: "Which pointcut expression matches a method named 'update' in classes within a 'service' package?"
  answers:
    - option: "execution(* com.example.service.*.update(..))"
      correct: true
    - option: "within(com.example.service.*) && execution(* update(..))"
      correct: false
    - option: "@annotation(com.example.service.Update)"
      correct: false
    - option: "bean(*Service) && execution(* update(..))"
      correct: false

- description: "True or False: The '@target' pointcut designator matches join points where the class of the executing object is annotated with a given annotation."
  answers:
    - option: "True"
      correct: false
    - option: "False"
      correct: true

- description: "What does the 'args' pointcut designator specifically match in Spring AOP?"
  answers:
    - option: "Join points with methods having arguments of the specified types."
      correct: true
    - option: "Join points within classes that have a specific annotation on any of their methods."
      correct: false
    - option: "Execution of methods within beans whose names match a given pattern."
      correct: false
    - option: "Join points where the target object implements a specified interface."
      correct: false

- description: "True or False: In Spring AOP, the 'within' pointcut designator can match methods from classes in sub-packages of the specified package."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which of the following best describes the 'Around' advice in Spring AOP?"
  answers:
    - option: "It allows for comprehensive control over the method execution, including proceeding, skipping, or modifying the execution."
      correct: true
    - option: "It executes only after a method completes successfully."
      correct: false
    - option: "It is used exclusively for logging exceptions after a method throws them."
      correct: false
    - option: "It runs before the join point, allowing for argument modification only."
      correct: false

- description: "True or False: '@args' designator in Spring AOP matches if the annotated method is passed an argument at runtime of the specified annotation."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "For an advice to modify the arguments of the join point in Spring AOP, which of the following is necessary?"
  answers:
    - option: "The use of a ProceedingJoinPoint in an Around advice."
      correct: true
    - option: "An AfterReturning advice with modified return values."
      correct: false
    - option: "A Before advice specifying new argument values."
      correct: false
    - option: "An AfterThrowing advice catching exceptions to alter arguments."
      correct: false

- description: "True or False: The execution of advice annotated with '@Before' occurs after the join point method execution."
  answers:
    - option: "False"
      correct: true
    - option: "True"
      correct: false

- description: "Which pointcut designator should be used to apply advice to all methods within classes located in a specific package and its sub-packages?"
  answers:
    - option: "within(com.example.service..*)"
      correct: true
    - option: "execution(* com.example.service..*.*(..))"
      correct: false
    - option: "@within(com.example.service..*)"
      correct: false
    - option: "target(com.example.service..*)"
      correct: false

- description: "True or False: An '@AfterThrowing' advice can access the thrown exception using the 'throwing' parameter."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice executes regardless of the method outcome, similar to a 'finally' block?"
  answers:
    - option: "After advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false
    - option: "AfterThrowing advice"
      correct: false

- description: "In Spring AOP, what enables the interception and modification of a method call at runtime?"
  answers:
    - option: "ProceedingJoinPoint within an Around advice"
      correct: true
    - option: "JoinPoint within a Before advice"
      correct: false
    - option: "Pointcut expressions within an AfterReturning advice"
      correct: false
    - option: "Advice annotations within an AfterThrowing advice"
      correct: false

- description: "True or False: The '@EnableAspectJAutoProxy' annotation activates support for handling components marked with '@Aspect'."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the '@target' pointcut designator match in Spring AOP?"
  answers:
    - option: "Join points where the target object is of a specific type"
      correct: true
    - option: "Methods that return a specific type"
      correct: false
    - option: "Beans defined in the application context by name"
      correct: false
    - option: "Execution of methods annotated with a specific annotation"
      correct: false

- description: "True or False: Pointcut expressions can be combined using logical operators AND ('&&'), OR ('||'), and NOT ('!') to form complex matches."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which type of advice would you use to execute code both before and after a method execution, allowing you to potentially prevent the method execution?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false
    - option: "AfterReturning advice"
      correct: false

- description: "In Spring AOP, what is the role of the '@AfterReturning' advice?"
  answers:
    - option: "It allows executing code after a method returns normally."
      correct: true
    - option: "It is used to execute code regardless of the method outcome."
      correct: false
    - option: "It allows executing code before the method execution."
      correct: false
    - option: "It is used to modify the return value of the method."
      correct: false

- description: "True or False: The 'within' pointcut designator limits matching to specific types, such as all classes within a package."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which pointcut expression matches any method execution within a class annotated with '@Repository'?"
  answers:
    - option: "@within(org.springframework.stereotype.Repository)"
      correct: true
    - option: "@target(org.springframework.stereotype.Repository)"
      correct: false
    - option: "@annotation(org.springframework.stereotype.Repository)"
      correct: false
    - option: "within(org.springframework.stereotype.Repository)"
      correct: false

- description: "True or False: An '@Around' advice in Spring AOP must always call 'ProceedingJoinPoint.proceed()' to continue with the advised method's execution."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What is the function of the '@Before' advice in Spring AOP?"
  answers:
    - option: "It is executed before the advised method's execution."
      correct: true
    - option: "It modifies the return value of the advised method."
      correct: false
    - option: "It is executed after the advised method completes successfully."
      correct: false
    - option: "It catches exceptions thrown by the advised method."
      correct: false

- description: "True or False: The '@After' advice in Spring AOP is executed after the advised method completes, regardless of the outcome."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which pointcut designator matches the execution of any method named 'find*' within a specific package?"
  answers:
    - option: "execution(* com.example.service.*.find*(..))"
      correct: true
    - option: "within(com.example.service.*) && execution(* find*(..))"
      correct: false
    - option: "@target(com.example.service.find*)"
      correct: false
    - option: "@annotation(com.example.service.find*)"
      correct: false

- description: "True or False: The 'args' pointcut designator in Spring AOP is used to match methods with specific arguments, based on their types."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "Which advice is used in Spring AOP to handle an exception thrown by the advised method and to execute custom code?"
  answers:
    - option: "AfterThrowing advice"
      correct: true
    - option: "After advice"
      correct: false
    - option: "Around advice"
      correct: false
    - option: "Before advice"
      correct: false

- description: "In Spring AOP, which advice allows modifying the advised method's return value?"
  answers:
    - option: "Around advice"
      correct: true
    - option: "AfterReturning advice"
      correct: false
    - option: "Before advice"
      correct: false
    - option: "After advice"
      correct: false

- description: "True or False: '@EnableAspectJAutoProxy' is necessary for activating AOP proxies based on AspectJ annotations within Spring applications."
  answers:
    - option: "True"
      correct: true
    - option: "False"
      correct: false

- description: "What does the '@annotation' pointcut designator target?"
  answers:
    - option: "Join points where the executing method is annotated with the specified annotation."
      correct: true
    - option: "Any method that is called within an annotated class."
      correct: false
    - option: "Methods whose return type is annotated with the specified annotation."
      correct: false
    - option: "Classes that are annotated with the specified annotation."
      correct: false

